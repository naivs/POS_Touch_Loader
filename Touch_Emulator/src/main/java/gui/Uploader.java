/*
 * Copyright (C) 2017 Ivan Naumov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui;

import data.TerminalGroup;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import models.UploaderTableModel;
import network.SMBClient;
import network.ServerCommunicator;
import utils.LoadAnalyzer;

/**
 *
 * @author Ivan
 */
public class Uploader extends javax.swing.JDialog {
    //private final LoadAnalyzer la;
    private final ServerCommunicator communicator;
    private final SMBClient smbClient;
    
    private int progress;

    /**
     * Creates new form Uploader
     *
     * @param parent
     * @param modal
     * @param configuration
     */
    public Uploader(java.awt.Frame parent, boolean modal, ArrayList<TerminalGroup> configuration) {
        super(parent, modal);
        initComponents();

        String[] colNames = new String[configuration.size()];
        for (int i = 0; i < colNames.length; i++) {
            colNames[i] = configuration.get(i).toString();
        }
        //la = new LoadAnalyzer(configuration);
        //jTable1.setModel(new UploaderTableModel(colNames, la.getDaysLoad()));
        
        /*
        -> test connection to server demon
        -> get server parameters
        -> get SMB auth data
        -> restrict uploading if "fire time" close.
        -> restrict uploading if other client connected (optional)
        -> restrict uploading if any day is overloaded
        -> test SMB share available
        */
        
        communicator = new ServerCommunicator();
        jLabel1.setText("Выгрузка данных на кассы будет произведена в: " + communicator.getLoadTime());
        smbClient = new SMBClient(Emulator.SERVER_IP, communicator.getSmbAuth());
        System.out.println(smbClient.testConnection());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        jTextPane2.setEditable(false);
        jTextPane2.setBorder(null);
        jTextPane2.setText("* В таблице представлена информация о заполненности кассовых групп продуктами в каждый день недели. Информация выводится в процентном эквиваленте.");
        jTextPane2.setFocusable(false);
        jScrollPane3.setViewportView(jTextPane2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Загрузка параметров на сервер");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("time");

        btnUpload.setText("Выгрузить");
        btnUpload.setFocusPainted(false);
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(204, 0, 0));

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 449, Short.MAX_VALUE)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(63, 63, 63))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel6))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void recursiveCopy(File file) {
        String name = file.getPath().substring(15);
        if (file.isDirectory()) {
            //System.out.println("create smb folder: " + file.getPath().substring(15));
            smbClient.createFolder(name);
            for (File fl : file.listFiles()) {
                recursiveCopy(fl);
            }
        } else {
            try {
                //System.out.println(file.getPath() + " -> " + file.getPath().substring(15));
                smbClient.putFile(file, file.getPath().substring(15));
            } catch (MalformedURLException ex) {
                System.err.println("Wrong destenation URL. " + ex.getMessage());
            } catch (IOException ex) {
                System.err.println("I/O exception while P_REGPAR.DAT or S_PLUREF.DAT uploading. " + ex.getMessage());
            }
        }
    }
    
    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // upload to server
        progress = 0;
        Thread task = new Thread() {
            @Override
            public void run() {
                btnUpload.setEnabled(false);
                smbClient.clearShare();
                //get local directory
                File sourseFolder = new File("resources/data/");
                int col = sourseFolder.listFiles().length;
                for(File f : sourseFolder.listFiles()) {
                    recursiveCopy(f);
                    progress += 100 / col;
                    jProgressBar1.setValue(progress);
                }
                
//                for (int tGroupNum = 0; tGroupNum < configuration.size(); tGroupNum++) {
//                    for (int dayNum = 0; dayNum < configuration.get(tGroupNum).getDaysOfWeek().length; dayNum++) {
//                        try {
//                            // create day folder
//                            smbClient.createFolder("day" + dayNum + "/");
//                            // create cafe folder
//                            smbClient.createFolder("day" + dayNum + "/cafe/");
//                            // copy .dat files
//                            File datFiles = new File("resources/data/day" + dayNum);
//                            for (File f : datFiles.listFiles((File directory, String fileName) -> fileName.contains(".DAT"))) {
//                                smbClient.putFile(f, "day" + dayNum + "/" + f.getName());
//                            }
//                            // copy images
//                            for (File img : new File("resources/data/day" + dayNum + "/cafe").listFiles()) {
//                                smbClient.putFile(img, "day" + dayNum + "/cafe/" + img.getName());
//                            }
//                        } catch (MalformedURLException ex) {
//                            System.err.println("Wrong destenation URL. " + ex.getMessage());
//                        } catch (IOException ex) {
//                            System.err.println("I/O exception while P_REGPAR.DAT or S_PLUREF.DAT uploading. " + ex.getMessage());
//                        }
//                        
//                        progress += 100 / (configuration.size() * configuration.get(tGroupNum).getDaysOfWeek().length);
//                        jProgressBar1.setValue(progress);
//                    }
//                }
                
                jProgressBar1.setValue(100);
                JOptionPane.showMessageDialog(null, "Данные выгружены на кассовый сервер!", "Информация", JOptionPane.PLAIN_MESSAGE);
                dispose();
            }
        };
        
        task.start();   
    }//GEN-LAST:event_btnUploadActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        communicator.shutDown();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
}
